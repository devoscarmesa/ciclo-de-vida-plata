{"version":3,"sources":["components/Planta.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","Planta","props","state","plants","nombre","get","then","res","console","log","catch","e","this","className","id","map","plant","key","common_name","family_name","scientific_name","cost","type","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gRAEMA,G,MAAQC,EAAQ,IAASC,SAEVC,E,kDACpB,WAAYC,GAAO,IAAD,8BACX,cAAMA,IACDC,MAAQ,CACTC,OAAQ,GACRC,OAAQ,UAJD,E,0KAwBXP,EAAMQ,IAAI,oIACTC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,MAEbG,OAAM,SAAAC,GAAC,OAAIH,QAAQC,IAAIE,M,gIAKlB,IACDR,EAAUS,KAAKV,MAAfC,OAEL,OADAK,QAAQC,IAAI,yCAER,6BAASI,UAAU,OACf,6BAASA,UAAU,aACf,2BAAOC,GAAG,oBAAoBD,UAAU,wBACpC,+BACI,4BACA,kCACA,+CACA,iDACA,oDACA,uCAGJ,+BACKV,EAAOY,KAAI,SAACC,EAAOF,GAChB,OAAQ,wBAAIG,IAAOH,GACf,4BAAKE,EAAMF,IACX,4BAAKE,EAAME,aACX,4BAAKF,EAAMG,aACX,4BAAKH,EAAMI,iBACX,4BAAKJ,EAAMK,YAK3B,8BACI,mDACA,2BAAOC,KAAO,OAAOR,GAAK,iBAE1B,oDACA,2BAAOQ,KAAO,OAAOR,GAAK,mBAE1B,wDACA,2BAAOQ,KAAO,OAAOR,GAAK,qBAE1B,yCACA,2BAAOQ,KAAO,OAAOR,GAAK,iB,GAzEdS,aCOrBC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCMcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.de76cc96.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nconst axios = require('axios').default;\r\n\r\nexport default class Planta extends Component {\r\n\tconstructor(props){\r\n        super(props);\r\n        this.state = {\r\n            plants: [], \r\n            nombre: \"Pepito\"\r\n        };\r\n        //console.log(props);\r\n        //console.log(\"Se esta ejecutando el contructor (constructor)\")\r\n    }\r\n\r\n    async componentDidMount(){\r\n       /* try{\r\n            var respuesta = await axios.get('https://trefle.io/api/v1/plants?token=PWMmIx7yT3RyNgiLUOLcdboglHHQaKmu4A_CSt7_n3E');\r\n            if(Array.isArray(respuesta.data))\r\n                this.setState({plants : respuesta.data}); \r\n            else\r\n                this.setState({plants : [respuesta.data]}); \r\n        }catch(error){\r\n            console.log(\"================\");\r\n            console.log(error);\r\n            console.log(respuesta);\r\n            console.log(\"================\");\r\n        }\r\n        */\r\n        axios.get('https://api.nasa.gov/neo/rest/v1/feed?api_key=VmDN7rZJcN4H6SkCCmMf4et28BcatWVMJEgqBygh&start_date=2020-08-07&end_date=2020-08-07')\r\n        .then(res => {\r\n          console.log(res)\r\n        })\r\n        .catch(e => console.log(e))\r\n    }\r\n    \r\n   \r\n    //delete\r\n    render() {\r\n        let {plants} = this.state;\r\n        console.log(\"Se esta renderizando el HTML (render)\");\r\n        return (\r\n            <article className=\"row\">\r\n                <article className=\"col-lg-12\">\r\n                    <table id=\"tbl-mensualidades\" className=\"table table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre común</th>\r\n                            <th>Nombre de Familia</th>\r\n                            <th>Nombre Científico</th>\r\n                            <th>Costo</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {plants.map((plant, id) => {\r\n                                return (<tr key = {id}>\r\n                                    <td>{plant.id}</td>\r\n                                    <td>{plant.common_name}</td>\r\n                                    <td>{plant.family_name}</td>\r\n                                    <td>{plant.scientific_name}</td>\r\n                                    <td>{plant.cost}</td>\r\n                                </tr>);\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                    <form>\r\n                        <label>Nombre común\t</label>\r\n                        <input type = \"text\" id = \"nombre_comum\"></input>\r\n                        \r\n                        <label>Nombre de familia</label>\r\n                        <input type = \"text\" id = \"nombre_familia\"></input>\r\n                        \r\n                        <label>Nombre Científico </label>\r\n                        <input type = \"text\" id = \"nombre_cintifico\"></input>\r\n                        \r\n                        <label>Costo </label>\r\n                        <input type = \"text\" id = \"costo\"></input>\r\n                        \r\n                    </form>\r\n                 </article>            \r\n\r\n            </article>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Planta from './components/Planta'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Planta/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}