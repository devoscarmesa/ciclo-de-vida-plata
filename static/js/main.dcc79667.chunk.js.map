{"version":3,"sources":["components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","Feed","props","state","feeds","console","log","get","then","res","undefined","data","near_earth_objects","first_element","Object","keys","setState","catch","e","this","className","id","map","feed","key","name","absolute_magnitude_h","target","href","nasa_jpl_url","is_sentry_object","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gRAEMA,G,MAAQC,EAAQ,IAASC,SAEVC,E,kDACpB,WAAYC,GAAO,IAAD,8BACX,cAAMA,IACDC,MAAQ,CACTC,MAAO,IAHA,E,qLASXC,QAAQC,IAAI,SACZR,EAAMS,IAAI,oIACTC,MAAK,SAAAC,GACJ,QAAmCC,IAAhCD,EAAIE,KAAKC,mBAAiC,CAC3C,IAAIC,EAAgBC,OAAOC,KAAKN,EAAIE,KAAKC,oBAAoB,GAC7D,EAAKI,SAAS,CAACZ,MAAMK,EAAIE,KAAKC,mBAAmBC,SAGpDI,OAAM,SAAAC,GAAC,OAAIb,QAAQC,IAAIY,M,gIAKlB,IACDd,EAASe,KAAKhB,MAAdC,MACL,OACI,6BAASgB,UAAU,OACf,6BAASA,UAAU,aACf,yBAAKA,UAAY,oBACb,2BAAOC,GAAG,oBAAoBD,UAAU,wBACpC,+BAAO,4BAAI,kCAAW,sCAAe,wCAAiB,mCAAY,qDAElE,+BACKhB,EAAMkB,KAAI,SAACC,GACR,OAAQ,wBAAIC,IAAOD,EAAKF,IACpB,4BAAKE,EAAKF,IACV,4BAAKE,EAAKE,MACV,4BAAKF,EAAKG,sBACV,4BAAI,uBAAGC,OAAS,SAASC,KAAOL,EAAKM,cAAeN,EAAKM,eACzD,4BAAKN,EAAKO,iBAAiB,KAAK,mB,GAvCtCC,aCOnBC,MARf,WACE,OACE,yBAAKZ,UAAU,mBACb,kBAAC,EAAD,QCMca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.dcc79667.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nconst axios = require('axios').default;\r\n\r\nexport default class Feed extends Component {\r\n\tconstructor(props){\r\n        super(props);\r\n        this.state = {\r\n            feeds: [], \r\n        };\r\n        \r\n    }\r\n\r\n    async componentDidMount(){\r\n        console.log(\"entra\")\r\n        axios.get('https://api.nasa.gov/neo/rest/v1/feed?api_key=VmDN7rZJcN4H6SkCCmMf4et28BcatWVMJEgqBygh&start_date=2020-08-07&end_date=2020-08-07')\r\n        .then(res => {\r\n          if(res.data.near_earth_objects !== undefined){\r\n            let first_element = Object.keys(res.data.near_earth_objects)[0]\r\n            this.setState({feeds:res.data.near_earth_objects[first_element]})            \r\n          }\r\n        })\r\n        .catch(e => console.log(e))\r\n    }\r\n    \r\n   \r\n    //delete\r\n    render() {\r\n        let {feeds} = this.state;\r\n        return (\r\n            <article className=\"row\">\r\n                <article className=\"col-lg-12\">\r\n                    <div className = \"table-responsive\">\r\n                        <table id=\"tbl-mensualidades\" className=\"table table-bordered\">\r\n                            <thead><tr><th>ID</th><th>Nombre</th><th>Magnitud</th><th>JPL</th><th>Es objeto centinela</th></tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {feeds.map((feed) => {\r\n                                    return (<tr key = {feed.id}>\r\n                                        <td>{feed.id}</td>\r\n                                        <td>{feed.name}</td>\r\n                                        <td>{feed.absolute_magnitude_h}</td>\r\n                                        <td><a target = \"_blank\" href ={feed.nasa_jpl_url}>{feed.nasa_jpl_url}</a></td>\r\n                                        <td>{feed.is_sentry_object?\"Si\":\"No\"}</td>\r\n                                    </tr>)\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                 </article>            \r\n\r\n            </article>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Feed from './components/Feed'\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Feed/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}